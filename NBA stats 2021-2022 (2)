# Note: There are duplicate player names resulted from team changes during the season.
# After initial inspection, I came to the conclusion that for players who have changed teams during the season, I need to assign a numerical value for each row to 
  distinguish before and after trade team. 

-- Here, I create a view, assigning a numerical value on each row

CREATE OR REPLACE view new_nba_player_stats AS
     select *, 
            row_number() over() as assigned_value 
     from nba_player_stats


/* Fetching all the players who changed teams during the season. Note that assigned_value column is critical to track which teams represent before trade and after
   trade - lower assigned_value represents team in the past. Moreover, row_number as rn column represents number of trades. */
   
CREATE MATERIALIZED VIEW compare_stats AS 

with recursive traded_player as 
     (select *
      from new_nba_player_stats
      where team = 'TOT'
      UNION
      select ps.* 
      from traded_player tp JOIN new_nba_player_stats ps ON tp.player = ps.player)
	
select player, 
       position, 
       team, 
       (pts + trb + ast + stl + blk - tov - ( fga - fg ) - ( fta - ft ))         as efficiency, 
       row_number() over(partition by player order by assigned_value)            as rn     
from traded_player
order by player, assigned_value


/* Comparing players's efficiency from before and after trade (Note:some players have been traded more than once during the season: 
   following code compares stat for first round of trade). */ 
   	
select worse_improve, 
       count(*)               as number_of_players
from (
        select t1.player, 
	       CASE WHEN (t2.efficiency - t1.efficiency) < 0 THEN 0 ELSE 1 END   as worse_improve
	from compare_stats t1 JOIN compare_stats t2 ON t1.player = t2.player AND t1.rn < t2.rn
	where t1.rn = 2 AND t2.rn = 3
     ) as binary_outcome  
group by worse_improve


/* of those whose efficiency deteriorated after first round of trade, how many have improved or worsened 
   after second round of trade */
	    
with efficiency_worsened as (
	select t2.*
	from compare_stats t1 JOIN compare_stats t2 ON t1.player = t2.player AND t1.rn < t2.rn
	where t1.rn = 2 AND t2.rn = 3 AND t2.efficiency - t1.efficiency < 0
	                     )
	
select worse_improve, 
       count(*)             as number_of_players
from (
	select CASE WHEN t3.efficiency - efficiency_worsened.efficiency < 0 THEN 0 ELSE 1 END as worse_improve
	from efficiency_worsened JOIN compare_stats t3 ON efficiency_worsened.player = t3.player 
	where efficiency_worsened.rn = 3 AND t3.rn = 4
      ) as a
group by worse_improve
